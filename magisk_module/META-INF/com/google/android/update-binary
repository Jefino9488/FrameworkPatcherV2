#!/sbin/sh

# Framework Patch V2 - Enhanced Update Binary
# Improved Magisk module installation script with better error handling

TMPDIR=/dev/tmp
MOUNTPATH=/dev/magisk_img
MODULE_NAME="Framework Patch V2"
MODULE_ID="mod_frameworks"

# Default permissions
umask 022

# Enhanced logging
LOG_FILE="/data/adb/magisk_install.log"
log() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] INSTALL: $1" >> "$LOG_FILE" 2>/dev/null || true
  ui_print "$1"
}

# Error handling
error_exit() {
  log "FATAL ERROR: $1"
  ui_print "ERROR: $1"
  ui_print "Installation failed!"
  cleanup_and_exit 1
}

# Cleanup function
cleanup_and_exit() {
  local exit_code=${1:-0}
  log "Cleaning up and exiting with code: $exit_code"
  rm -rf "$TMPDIR" 2>/dev/null
  rm -rf "$MOUNTPATH" 2>/dev/null
  exit $exit_code
}

# Initial cleanup and setup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# Enhanced ui_print with logging
ui_print() { 
  echo "$1"
  log "$1"
}

# Check Magisk version compatibility
require_new_magisk() {
  ui_print "***********************************"
  ui_print " Please install the latest Magisk! "
  ui_print " Required: Magisk 20.4+ "
  ui_print " Current: Magisk $MAGISK_VER "
  ui_print "***********************************"
  error_exit "Incompatible Magisk version"
}

# Check if imageless Magisk
imageless_magisk() {
  [ $MAGISK_VER_CODE -gt 18100 ]
  return $?
}

# Validate installation environment
validate_environment() {
  log "Validating installation environment..."
  
  # Check if we're running as root
  if [ "$(id -u)" != "0" ]; then
    error_exit "Must run as root"
  fi
  
  # Check available space
  local available_space=$(df /data 2>/dev/null | tail -1 | awk '{print $4}')
  if [ -n "$available_space" ] && [ "$available_space" -lt 1048576 ]; then  # Less than 1MB
    error_exit "Insufficient storage space"
  fi
  
  # Check if we have required tools
  for tool in unzip mkdir chmod; do
    if ! command -v "$tool" >/dev/null 2>&1; then
      error_exit "Required tool not found: $tool"
    fi
  done
  
  log "Environment validation passed"
}

##########################################################################################
# Environment Setup
##########################################################################################

log "Starting Framework Patch V2 installation..."

OUTFD=$2
ZIPFILE=$3

# Validate inputs
if [ -z "$ZIPFILE" ] || [ ! -f "$ZIPFILE" ]; then
  error_exit "Invalid zip file: $ZIPFILE"
fi

log "Installing from: $ZIPFILE"

# Mount data partition
if ! mount /data 2>/dev/null; then
  error_exit "Failed to mount /data partition"
fi

# Load utility functions
if [ -f /data/adb/magisk/util_functions.sh ]; then
  log "Loading Magisk utility functions..."
  . /data/adb/magisk/util_functions.sh
  NVBASE=/data/adb
else
  error_exit "Magisk utility functions not found"
fi

# Validate environment before proceeding
validate_environment

# Preparation for flashable zips
log "Setting up flashable environment..."
setup_flashable

# Mount partitions
log "Mounting partitions..."
mount_partitions

# Detect version and architecture
log "Detecting system version and architecture..."
api_level_arch_detect

log "Detected: Android API $API, Architecture: $ARCH"

# Setup busybox and binaries
log "Setting up busybox and binaries..."
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

log "Extracting module files..."

# Extract common files with error checking
if ! unzip -oj "$ZIPFILE" module.prop install.sh uninstall.sh 'common/*' -d $TMPDIR >&2; then
  error_exit "Failed to extract module files from zip"
fi

# Validate essential files
[ ! -f $TMPDIR/install.sh ] && error_exit "install.sh not found in module"
[ ! -f $TMPDIR/module.prop ] && error_exit "module.prop not found in module"

log "Module files extracted successfully"

# Load install script
log "Loading install script..."
. $TMPDIR/install.sh

# Setup module paths based on Magisk version
if imageless_magisk; then
  log "Using imageless Magisk mode"
  $BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
  MODULEROOT=$NVBASE/$MODDIRNAME
else
  log "Using legacy Magisk mode"
  $BOOTMODE && IMGNAME=magisk_merge.img || IMGNAME=magisk.img
  IMG=$NVBASE/$IMGNAME
  request_zip_size_check "$ZIPFILE"
  mount_magisk_img
  MODULEROOT=$MOUNTPATH
fi

# Get module ID and set path
MODID=`grep_prop id $TMPDIR/module.prop`
MODPATH=$MODULEROOT/$MODID

log "Module ID: $MODID"
log "Module path: $MODPATH"

# Display module name
print_modname

##########################################################################################
# Installation
##########################################################################################

log "Starting module installation..."

# Create mod paths
log "Creating module directory..."
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# Run custom installation
log "Running custom installation script..."
on_install

# Remove placeholder files
rm -f $MODPATH/system/placeholder 2>/dev/null

# Copy custom uninstaller
if [ -f $TMPDIR/uninstall.sh ]; then
  log "Copying uninstall script..."
  cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh
fi

# Handle auto mount settings
log "Setting up auto mount..."
if imageless_magisk; then
  $SKIPMOUNT && touch $MODPATH/skip_mount
else
  $SKIPMOUNT || touch $MODPATH/auto_mount
fi

# Copy system properties if needed
if [ "$PROPFILE" = true ] && [ -f $TMPDIR/system.prop ]; then
  log "Copying system properties..."
  cp -af $TMPDIR/system.prop $MODPATH/system.prop
fi

# Copy module info
log "Installing module properties..."
cp -af $TMPDIR/module.prop $MODPATH/module.prop

# Update Magisk Manager info
if $BOOTMODE; then
  log "Updating Magisk Manager info..."
  if imageless_magisk; then
    mktouch $NVBASE/modules/$MODID/update
    cp -af $TMPDIR/module.prop $NVBASE/modules/$MODID/module.prop
  else
    mktouch /sbin/.magisk/img/$MODID/update
    cp -af $TMPDIR/module.prop /sbin/.magisk/img/$MODID/module.prop
  fi
fi

# No additional scripts needed for this module

# Handle replace folders
if [ -n "$REPLACE" ]; then
  log "Setting up replace folders..."
  for TARGET in $REPLACE; do
    mktouch $MODPATH$TARGET/.replace
    log "Added replace target: $TARGET"
  done
fi

# Set permissions
log "Setting module permissions..."
ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalization
##########################################################################################

log "Finalizing installation..."

# Change to root directory
cd /

# Unmount if needed
imageless_magisk || unmount_magisk_img

# Cleanup recovery
$BOOTMODE || recovery_cleanup

# Final cleanup
rm -rf $TMPDIR $MOUNTPATH

log "Installation completed successfully"
ui_print "- Installation completed!"
ui_print "- Framework Patch V2 installed successfully"
ui_print "- Reboot recommended for changes to take effect"

cleanup_and_exit 0