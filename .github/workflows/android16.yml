name: Android 16 Framework Patcher

on:
  workflow_dispatch:
    inputs:
      api_level:
        description: 'Android API level (Android 16 is API 36)'
        required: true
        default: '36'
        type: string
      device_name:
        description: 'Device codename (for labeling artifacts)'
        required: true
        type: string
      version_name:
        description: 'ROM/firmware version identifier'
        required: true
        type: string
      framework_url:
        description: 'Download URL to framework.jar (leave blank if skipping)'
        required: false
        default: ''
        type: string
      services_url:
        description: 'Download URL to services.jar (leave blank if skipping)'
        required: false
        default: ''
        type: string
      miui_services_url:
        description: 'Download URL to miui-services.jar (leave blank if skipping)'
        required: false
        default: ''
        type: string
      patch_framework:
        description: 'Patch framework.jar'
        required: true
        default: true
        type: boolean
      patch_services:
        description: 'Patch services.jar'
        required: true
        default: true
        type: boolean
      patch_miui_services:
        description: 'Patch miui-services.jar'
        required: true
        default: false
        type: boolean
      user_id:
        description: 'Telegram User ID to notify (optional)'
        required: false
        type: string

jobs:
  patch:
    name: Android 16 Framework Patcher
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full wget zip python3

      - name: Prepare tools directory
        run: |
          mkdir -p tools
          if [ ! -f tools/apktool.jar ]; then
            wget -O tools/apktool.jar https://github.com/iBotPeaches/Apktool/releases/download/v2.9.3/apktool_2.9.3.jar
          fi

      - name: Download target JARs
        run: |
          set -e
          if [ "${{ inputs.patch_framework }}" = "true" ]; then
            if [ -z "${{ inputs.framework_url }}" ]; then
              echo "framework_url not provided but patch_framework is true" >&2
              exit 1
            fi
            wget -O framework.jar "${{ inputs.framework_url }}"
          fi

          if [ "${{ inputs.patch_services }}" = "true" ]; then
            if [ -z "${{ inputs.services_url }}" ]; then
              echo "services_url not provided but patch_services is true" >&2
              exit 1
            fi
            wget -O services.jar "${{ inputs.services_url }}"
          fi

          if [ "${{ inputs.patch_miui_services }}" = "true" ]; then
            if [ -z "${{ inputs.miui_services_url }}" ]; then
              echo "miui_services_url not provided but patch_miui_services is true" >&2
              exit 1
            fi
            wget -O miui-services.jar "${{ inputs.miui_services_url }}"
          fi

      - name: Run Android 16 patcher
        run: |
          chmod +x scripts/patcher_a16.sh

          PATCH_FLAGS=""
          if [ "${{ inputs.patch_framework }}" = "true" ]; then
            PATCH_FLAGS="$PATCH_FLAGS --framework"
          fi
          if [ "${{ inputs.patch_services }}" = "true" ]; then
            PATCH_FLAGS="$PATCH_FLAGS --services"
          fi
          if [ "${{ inputs.patch_miui_services }}" = "true" ]; then
            PATCH_FLAGS="$PATCH_FLAGS --miui-services"
          fi

          echo "Patching with flags: $PATCH_FLAGS"

          ./scripts/patcher_a16.sh \
            "${{ inputs.api_level }}" \
            "${{ inputs.device_name }}" \
            "${{ inputs.version_name }}" \
            $PATCH_FLAGS

      - name: List generated artifacts
        run: |
          echo "Generated files:"
          ls -R | grep -E 'patched\.jar$|Framework-Patcher-'

      - name: Set Release Info
        id: release_info
        run: |
          # Format version name to be git tag friendly (replace spaces and dots with hyphens)
          SAFE_VERSION=$(echo "${{ inputs.version_name }}" | sed 's/[. ]/-/g')
          RELEASE_TAG="${{ inputs.device_name }}_${SAFE_VERSION}"
          echo "tag=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "name=Android 16 Framework Patch for ${{ inputs.device_name }} (${{ inputs.version_name }})" >> $GITHUB_OUTPUT

      - name: Find Module ZIP
        id: find_zip
        run: |
          ZIP_FILE=$(ls Framework-Patcher-${{ inputs.device_name }}*.zip)
          echo "file_path=${ZIP_FILE}" >> $GITHUB_OUTPUT

      - name: Delete Existing Release
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const existingRelease = releases.data.find(r => r.tag_name === '${{ steps.release_info.outputs.tag }}');

              if (existingRelease) {
                console.log('Found existing release, deleting...');
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: existingRelease.id
                });

                // Delete the tag
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: 'tags/${{ steps.release_info.outputs.tag }}'
                  });
                } catch (e) {
                  console.log('Tag might not exist, continuing...');
                }
              }
            } catch (e) {
              console.log('No existing release found or error occurred:', e.message);
            }

      - name: Generate Release Body
        id: generate_release_body
        run: |
          BODY="Android 16 Framework Patcher for ${{ inputs.device_name }}
          Version: ${{ inputs.version_name }}
          Android API: ${{ inputs.api_level }}

          Sources:"
          if [ "${{ inputs.patch_framework }}" = "true" ]; then
            BODY="$BODY
          - Framework: ${{ inputs.framework_url }}"
          fi
          if [ "${{ inputs.patch_services }}" = "true" ]; then
            BODY="$BODY
          - Services: ${{ inputs.services_url }}"
          fi
          if [ "${{ inputs.patch_miui_services }}" = "true" ]; then
            BODY="$BODY
          - MIUI Services: ${{ inputs.miui_services_url }}"
          fi
          BODY="$BODY

          Build date: $(date +'%Y-%m-%d')
          Build time: $(date +'%H:%M:%S UTC')"
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          name: ${{ steps.release_info.outputs.name }}
          files: ${{ steps.find_zip.outputs.file_path }}
          body: ${{ steps.generate_release_body.outputs.release_body }}

      - name: Upload patched jars
        uses: actions/upload-artifact@v4
        with:
          name: android16-patched-jars-${{ github.run_id }}
          if-no-files-found: warn
          path: |
            framework_patched.jar
            services_patched.jar
            miui-services_patched.jar
          retention-days: 7

      - name: Upload Magisk module zip
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: android16-magisk-module-${{ github.run_id }}
          if-no-files-found: warn
          path: Framework-Patcher-${{ inputs.device_name }}-*.zip
          retention-days: 7

      - name: Send Telegram Notification (Success)
        if: success() && github.event.inputs.user_id != ''
        run: |
          escape_mdv2() {
            echo "$1" | sed -e 's/\\/\\\\/g' -e 's/\./\\./g' -e 's/\-/\\-/g' -e 's/!/\\!/g' -e 's/#/\\#/g' -e 's/{/\\{/g' -e 's/}/\\}/g' -e 's/(/\\(/g' -e 's/)/\\)/g'
          }

          DEVICE_NAME_ESCAPED=$(escape_mdv2 "${{ inputs.device_name }}")
          VERSION_NAME_ESCAPED=$(escape_mdv2 "${{ inputs.version_name }}")
          API_LEVEL_ESCAPED=$(escape_mdv2 "${{ inputs.api_level }}")

          MESSAGE=$(printf "Android 16 framework patch is ready for your device:\n\n> *Codename:* \`%s\`\n> *Version:* \`%s\`\n> *Android API:* \`%s\`" \
            "$DEVICE_NAME_ESCAPED" \
            "$VERSION_NAME_ESCAPED" \
            "$API_LEVEL_ESCAPED")
          
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.tag }}"
          
          REPLY_MARKUP="{\"inline_keyboard\":[[{\"text\":\"Click here to download\",\"url\":\"$RELEASE_URL\"}],[{\"text\":\"Support me\",\"url\":\"https://buymeacoffee.com/jefino\"}]]}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ inputs.user_id }} \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2" \
            -d reply_markup="$REPLY_MARKUP"

      - name: Send Telegram Notification (Failure)
        if: failure() && github.event.inputs.user_id != ''
        run: |
          escape_mdv2() {
            echo "$1" | sed -e 's/\\/\\\\/g' -e 's/\./\\./g' -e 's/\-/\\-/g' -e 's/!/\\!/g' -e 's/#/\\#/g' -e 's/{/\\{/g' -e 's/}/\\}/g' -e 's/(/\\(/g' -e 's/)/\\)/g'
          }

          DEVICE_NAME_ESCAPED=$(escape_mdv2 "${{ inputs.device_name }}")
          VERSION_NAME_ESCAPED=$(escape_mdv2 "${{ inputs.version_name }}")
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          MESSAGE=$(printf "Android 16 framework patch failed for your device:\n\n> *Codename:* \`%s\`\n> *Version:* \`%s\`\n\nPlease check the workflow logs for more details." \
            "$DEVICE_NAME_ESCAPED" \
            "$VERSION_NAME_ESCAPED")

          REPLY_MARKUP="{\"inline_keyboard\":[[{\"text\":\"View Workflow Run\",\"url\":\"$WORKFLOW_URL\"}]]}"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ inputs.user_id }} \
            -d text="$MESSAGE" \
            -d parse_mode="MarkdownV2" \
            -d reply_markup="$REPLY_MARKUP"